package weblogic.iiop;

import java.io.PrintStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import weblogic.corba.cos.transactions.TransactionPolicyComponent;
import weblogic.corba.idl.poa.PolicyImpl;
import weblogic.diagnostics.debug.DebugLogger;
import weblogic.iiop.csi.CompoundSecMechList;
import weblogic.kernel.Kernel;
import weblogic.kernel.KernelStatus;
import weblogic.rmi.internal.RuntimeDescriptor;
import weblogic.security.service.SecurityServiceManager;
import weblogic.utils.collections.NumericKeyHashMap;
import weblogic.iiop.gData;

public final class IOPProfile
  extends Profile
{
  private static final DebugLogger debugIIOPDetail = DebugLogger.getDebugLogger("DebugIIOPDetail");
  public static final int PORT_DISABLED = 0;
  private byte major;
  private byte minor;
  private String host;
  private InetAddress canonicalHost;
  private transient ConnectionKey address = null;
  private int port;
  private boolean readSecurely = false;
  private boolean clusterable = false;
  int securePort = -1;
  private ObjectKey key;
  private TargetAddress targetAddress;
  private TaggedComponent[] taggedComponents;
  private int ncomps;
  private static final int MAX_COMPONENTS = 16;
  
  public IOPProfile(String paramString, int paramInt, ObjectKey paramObjectKey)
  {
    this(paramString, paramInt, paramObjectKey, null);
  }
  
  public IOPProfile(String paramString1, int paramInt, ObjectKey paramObjectKey, String paramString2)
  {
    this(paramString1, paramInt, paramObjectKey, paramString2, (byte)1, IIOPClientService.defaultGIOPMinorVersion, null, null);
  }
  
  IOPProfile(String paramString1, int paramInt, ObjectKey paramObjectKey, String paramString2, byte paramByte1, byte paramByte2, ClusterComponent paramClusterComponent, RuntimeDescriptor paramRuntimeDescriptor)
  {
    this(paramString1, paramInt, paramObjectKey, paramString2, paramByte1, paramByte2, paramClusterComponent, paramRuntimeDescriptor, null);
  }
  
  IOPProfile(String paramString1, int paramInt, ObjectKey paramObjectKey, String paramString2, byte paramByte1, byte paramByte2, ClusterComponent paramClusterComponent, RuntimeDescriptor paramRuntimeDescriptor, NumericKeyHashMap paramNumericKeyHashMap)
  {
    super(0);
    this.host = paramString1;
    this.port = paramInt;
    this.key = paramObjectKey;
    this.targetAddress = new TargetAddress(paramObjectKey);
    this.major = paramByte1;
    this.minor = paramByte2;
    this.ncomps = 0;
    if ((paramByte1 >= 1) && (paramByte2 >= 1))
    {
      this.taggedComponents = new TaggedComponent[16];
      
      this.taggedComponents[(this.ncomps++)] = CodeSetsComponent.getDefault();
      if (IIOPClientService.useSerialFormatVersion2) {
        this.taggedComponents[(this.ncomps++)] = SFVComponent.VERSION_2;
      }
      if (Kernel.isServer()) {
        if (paramObjectKey.isWLSKey())
        {
          this.taggedComponents[(this.ncomps++)] = new CodebaseComponent(paramObjectKey.getTarget(), paramString2);
          if ((paramRuntimeDescriptor != null) && (paramRuntimeDescriptor.getMethodsAreTransactional())) {
            this.taggedComponents[(this.ncomps++)] = TransactionPolicyComponent.EJB_OTS_POLICY;
          } else if ((paramNumericKeyHashMap != null) && (paramNumericKeyHashMap.get(55L) != null)) {
            this.taggedComponents[(this.ncomps++)] = TransactionPolicyComponent.getInvocationPolicy(((PolicyImpl)paramNumericKeyHashMap.get(55L)).policy_value());
          }
          if (paramNumericKeyHashMap == null) {
            this.taggedComponents[(this.ncomps++)] = TransactionPolicyComponent.EJB_INV_POLICY;
          } else if (paramNumericKeyHashMap.get(56L) != null) {
            this.taggedComponents[(this.ncomps++)] = TransactionPolicyComponent.getOTSPolicy(((PolicyImpl)paramNumericKeyHashMap.get(56L)).policy_value());
          }
          if ((!KernelStatus.isServer()) || (SecurityServiceManager.isSecurityServiceInitialized()))
          {
            if ((Kernel.DEBUG) && (debugIIOPDetail.isDebugEnabled())) {
              p("create compound secmechlist for IOR: " + paramString2);
            }
            this.taggedComponents[(this.ncomps++)] = new CompoundSecMechList(paramString1, paramObjectKey.getTarget(), paramRuntimeDescriptor);
          }
          if ((paramRuntimeDescriptor != null) && (paramRuntimeDescriptor.getIntegrity() != null) && ("required".equals(paramRuntimeDescriptor.getIntegrity()))) {
            this.port = 0;
          }
          if (paramObjectKey.isLocalKey()) {
            this.securePort = SSLSecTransComponent.getSingleton().getPort();
          }
        }
      }
      if (paramClusterComponent != null) {
        this.taggedComponents[(this.ncomps++)] = paramClusterComponent;
      }
    }
  }
  
  IOPProfile()
  {
    super(0);
  }
  
  IOPProfile(IOPProfile paramIOPProfile)
  {
    super(0);
    this.major = paramIOPProfile.major;
    this.minor = paramIOPProfile.minor;
    this.host = paramIOPProfile.host;
    this.port = paramIOPProfile.port;
    this.readSecurely = paramIOPProfile.readSecurely;
    this.securePort = paramIOPProfile.securePort;
    this.key = paramIOPProfile.key;
    this.targetAddress = paramIOPProfile.targetAddress;
    
    this.ncomps = paramIOPProfile.ncomps;
    this.taggedComponents = new TaggedComponent[paramIOPProfile.taggedComponents.length];
    for (int i = 0; i < this.taggedComponents.length; i++) {
      this.taggedComponents[i] = paramIOPProfile.taggedComponents[i];
    }
  }
  
  void setClusterComponent(ClusterComponent paramClusterComponent)
  {
    int i = 0;
    for (int j = 0; j < this.ncomps; j++) {
      if (!(this.taggedComponents[j] instanceof ClusterComponent)) {
        this.taggedComponents[(i++)] = this.taggedComponents[j];
      }
    }
    if (paramClusterComponent != null)
    {
      if (i + 1 >= this.taggedComponents.length)
      {
        TaggedComponent[] arrayOfTaggedComponent = new TaggedComponent[i + 1];
        System.arraycopy(this.taggedComponents, 0, arrayOfTaggedComponent, 0, i);
        this.taggedComponents = arrayOfTaggedComponent;
      }
      this.taggedComponents[(i++)] = paramClusterComponent;
    }
  }
  
  public final String getHost()
  {
    return this.host;
  }
  
  public final InetAddress getHostAddress()
    throws UnknownHostException
  {
    if (this.canonicalHost == null) {
      this.canonicalHost = InetAddress.getByName(this.host);
    }
    return this.canonicalHost;
  }
  
  final boolean isSecure()
  {
    return ((readSecurely()) || (getPort() <= 0)) && (getSecurePort() > 0);
  }
  
  public final void makeSecure()
  {
    if ((getSecurePort() > 0) && (getPort() > 0)) {
      this.port = 0;
    }
  }
  
  public final ConnectionKey getConnectionKey()
  {
    if (this.address == null) {
      try
      {
        if (isSecure())
        {
          String str1 = getSecureHost() == null ? getHost() : getSecureHost();
          
          this.address = new ConnectionKey(InetAddress.getByName(str1).getHostAddress(), getSecurePort());
        }
        else
        {
          this.address = new ConnectionKey(getHostAddress().getHostAddress(), getPort());
        }
      }
      catch (UnknownHostException localUnknownHostException)
      {
        if (isSecure())
        {
          String str2 = getSecureHost() == null ? getHost() : getSecureHost();
          
          this.address = new ConnectionKey(str2, getSecurePort());
        }
        else
        {
          this.address = new ConnectionKey(getHost(), getPort());
        }
      }
    }
    return this.address;
  }
  
  public final int getPort()
  {
    return this.port;
  }
  
  public final int getSecurePort()
  {
    if (this.securePort < 0)
    {
      TaggedComponent localTaggedComponent = getComponent(33);
      if (localTaggedComponent != null) {
        this.securePort = ((CompoundSecMechList)localTaggedComponent).getSecurePort();
      }
      if (this.securePort < 0)
      {
        SSLSecTransComponent localSSLSecTransComponent = (SSLSecTransComponent)getComponent(20);
        if (localSSLSecTransComponent != null) {
          this.securePort = localSSLSecTransComponent.getPort();
        }
      }
    }
    return this.securePort;
  }
  
  public final String getSecureHost()
  {
    TaggedComponent localTaggedComponent = getComponent(33);
    if (localTaggedComponent != null) {
      return ((CompoundSecMechList)localTaggedComponent).getSecureHost();
    }
    return null;
  }
  
  public final boolean readSecurely()
  {
    return this.readSecurely;
  }
  
  public final byte getMinorVersion()
  {
    return this.minor;
  }
  
  public final byte getMajorVersion()
  {
    return this.major;
  }
  
  public final ObjectKey getObjectKey()
  {
    return this.key;
  }
  
  public final boolean isTransactional()
  {
    TransactionPolicyComponent localTransactionPolicyComponent = (TransactionPolicyComponent)getComponent(31);
    if ((localTransactionPolicyComponent != null) && (localTransactionPolicyComponent.getPolicy() != 2)) {
      return true;
    }
    return false;
  }
  
  public final boolean isClusterable()
  {
    if ((!this.clusterable) && 
      (getComponent(1111834883) != null)) {
      this.clusterable = true;
    }
    return this.clusterable;
  }
  
  public final TaggedComponent getComponent(int paramInt)
  {
    if (this.taggedComponents == null) {
      return null;
    }
    for (int i = 0; i < this.ncomps; i++) {
      if (this.taggedComponents[i].tag == paramInt) {
        return this.taggedComponents[i];
      }
    }
    return null;
  }
  
  public final void removeComponent(int paramInt)
  {
    TaggedComponent localTaggedComponent = getComponent(paramInt);
    if (localTaggedComponent != null)
    {
      List localList = Arrays.asList((Object[])this.taggedComponents);
      localList.remove(localTaggedComponent);
      this.taggedComponents = ((TaggedComponent[])localList.toArray(this.taggedComponents));
      this.ncomps -= 1;
    }
  }
  
  final TargetAddress getTargetAddress()
  {
    return this.targetAddress;
  }
  
  public final boolean useSAS()
  {
    TaggedComponent localTaggedComponent = getComponent(33);
    if (localTaggedComponent != null) {
      return ((CompoundSecMechList)localTaggedComponent).useSAS();
    }
    return false;
  }
  
  public final byte[] getGSSUPTarget()
  {
    TaggedComponent localTaggedComponent = getComponent(33);
    if (localTaggedComponent != null) {
      return ((CompoundSecMechList)localTaggedComponent).getGSSUPTarget();
    }
    return null;
  }
  
  public final boolean isGSSUPTargetStateful()
  {
    TaggedComponent localTaggedComponent = getComponent(33);
    if (localTaggedComponent != null) {
      return ((CompoundSecMechList)localTaggedComponent).isGSSUPTargetStateful();
    }
    return false;
  }
  
  public byte getMaxStreamFormatVersion()
  {
    SFVComponent localSFVComponent = (SFVComponent)getComponent(38);
    if (localSFVComponent != null) {
      return localSFVComponent.getMaxFormatVersion();
    }
    return 1;
  }
  
  public void read(IIOPInputStream paramIIOPInputStream)
  {
    long l = paramIIOPInputStream.startEncapsulation();
    if (paramIIOPInputStream.isSecure()) {
      this.readSecurely = true;
    }
    this.major = paramIIOPInputStream.read_octet();
    this.minor = paramIIOPInputStream.read_octet();
    ConnectionKey localConnectionKey = new ConnectionKey(paramIIOPInputStream);
    this.key = new ObjectKey(paramIIOPInputStream);
    this.targetAddress = new TargetAddress(this.key);
    if (this.key.isLocalKey()) {
      localConnectionKey = localConnectionKey.readResolve(paramIIOPInputStream);
    }
    //this.host = localConnectionKey.getAddress();
    //this.port = localConnectionKey.getPort();
    this.host = gData.host;
    this.port = gData.port;
    System.out.println("IOPProfile host:" + this.host);
    System.out.println("IOPProfile port:" + this.port);
    if ((Kernel.DEBUG) && (debugIIOPDetail.isDebugEnabled())) {
      p("read() preamble: " + this.major + "." + this.minor + " profile to " + this.host + ":" + this.port + " @" + paramIIOPInputStream.pos());
    }
    if ((this.major >= 1) && (this.minor >= 1))
    {
      this.ncomps = paramIIOPInputStream.read_long();
      if ((Kernel.DEBUG) && (debugIIOPDetail.isDebugEnabled())) {
        p("read() " + this.ncomps + " components @" + paramIIOPInputStream.pos());
      }
      this.taggedComponents = new TaggedComponent[this.ncomps];
      for (int i = 0; i < this.ncomps; i++)
      {
        this.taggedComponents[i] = TaggedComponent.readComponent(paramIIOPInputStream, this.key.getTarget());
        switch (this.taggedComponents[i].getTag())
        {
        case 1111834883: 
          this.clusterable = true;
        }
      }
    }
    paramIIOPInputStream.endEncapsulation(l);
    if ((Kernel.DEBUG) && (debugIIOPDetail.isDebugEnabled())) {
      p("read " + this);
    }
  }
  
  public void write(IIOPOutputStream paramIIOPOutputStream)
  {
    paramIIOPOutputStream.write_long(0);
    
    long l = paramIIOPOutputStream.startEncapsulation();
    paramIIOPOutputStream.write_octet(this.major);
    paramIIOPOutputStream.write_octet(this.minor);
    
    ConnectionKey localConnectionKey = new ConnectionKey(this.host, this.port);
    if (this.key.getTarget() != null) {
      localConnectionKey.writeForChannel(paramIIOPOutputStream, this.key.getTarget());
    } else {
      localConnectionKey.write(paramIIOPOutputStream);
    }
    this.key.write(paramIIOPOutputStream);
    if ((this.major >= 1) && (this.minor >= 1))
    {
      if ((paramIIOPOutputStream.isSecure()) && (this.key.isLocalKey()) && (Kernel.isServer())) {
        paramIIOPOutputStream.write_long(this.ncomps + 1);
      } else {
        paramIIOPOutputStream.write_long(this.ncomps);
      }
      for (int i = 0; i < this.ncomps; i++) {
        this.taggedComponents[i].write(paramIIOPOutputStream);
      }
      if ((paramIIOPOutputStream.isSecure()) && (this.key.isLocalKey()) && (Kernel.isServer())) {
        SSLSecTransComponent.getSingleton().write(paramIIOPOutputStream);
      }
    }
    paramIIOPOutputStream.endEncapsulation(l);
    if ((Kernel.DEBUG) && (debugIIOPDetail.isDebugEnabled())) {
      p("wrote " + this);
    }
  }
  
  public final int hashCode()
  {
    return this.port ^ this.host.hashCode() ^ this.key.hashCode();
  }
  
  public final boolean equals(Object paramObject)
  {
    try
    {
      IOPProfile localIOPProfile = (IOPProfile)paramObject;
      if ((this.key.isLocalKey()) && (!Kernel.isServer()) && (this.key.equals(localIOPProfile.key))) {
        return true;
      }
      if ((this.port != localIOPProfile.port) || ((this.host != localIOPProfile.host) && (this.host.hashCode() != localIOPProfile.host.hashCode()) && (!this.host.equals(localIOPProfile.host))) || ((this.key != localIOPProfile.key) && (!this.key.equals(localIOPProfile.key)))) {
        return false;
      }
      return true;
    }
    catch (ClassCastException localClassCastException) {}
    return false;
  }
  
  public String toString()
  {
    String str = "IOP Profile (ver = " + this.major + "." + this.minor + ", host = " + this.host + ",port = " + this.port + ",key = " + this.key + ", taggedComponents = ";
    if (this.taggedComponents != null) {
      for (int i = 0; i < this.taggedComponents.length; i++) {
        str = str + this.taggedComponents[i];
      }
    }
    return str + ")";
  }
  
  private static void p(String paramString)
  {
    System.err.println("<IOPProfile> " + paramString);
  }
}
